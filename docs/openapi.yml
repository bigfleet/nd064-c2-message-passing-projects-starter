openapi: 3.1.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/JIM_4/udaconnect/1.0.0
info:
  description: This is the UdaConnect API for part 2 of the Cloud-Native Architecture nanodegree program from udemy.
  version: "1.0.0"
  title: UdaConnect API
  contact:
    email: jim@jimvanfleet.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /persons:
    get:
      summary: People listing
      operationId: listPeople
      parameters:
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '400':
          description: bad input parameter
    post:
      summary: adds a Person item
      operationId: addPerson
      description: Adds a person to the system
      responses:
        '201':
          description: Person created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing person already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        description: Person item to add
  /persons/{personId}:
    get:
      summary: Person detail
      operationId: showPerson
      parameters:
        - in: path
          name: personId
          description: ID of a person to show
          schema:
            type: integer
            format: int32
            minimum: 0
          required: true
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '400':
          description: bad input parameter
  /persons/{personId}/connection:
    get:
      summary: Connection details for person
      operationId: personConnections
      parameters:
        - in: path
          name: personId
          description: ID of a person to show
          schema:
            type: integer
            format: int32
            minimum: 0
          required: true
        - in: query
          name: start_date
          description: number of records to skip for pagination
          schema:
            type: string
            format: date-time
          required: true
        - in: query
          name: end_date
          description: number of records to skip for pagination
          schema:
            type: string
            format: date-time
          required: true
        - in: query
          name: distance
          description: distance in meters to permit for connection search
          schema:
            type: integer
            format: int32
            minimum: 0
          required: true
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connection'
        '400':
          description: bad input parameter
  /locations:
    get:
      summary: Location listing
      operationId: listLocations
      parameters:
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '400':
          description: bad input parameter
    post:
      summary: adds a location item
      operationId: addLocation
      description: Adds a location to the system
      responses:
        '201':
          description: Location created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
        description: Location item to add
  /locations/{locationId}:
    get:
      summary: Location detail
      operationId: showLocation
      parameters:
        - in: path
          name: locationId
          description: ID of a location to show
          schema:
            type: integer
            format: int32
            minimum: 0
          required: true
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '400':
          description: bad input parameter
components:
  schemas:
    Person:
      type: object
      required:
        - id
        - firstName
        - lastName
        - companyName
      properties:
        id:
          type: integer
          format: number
          example: 1
        firstName:
          type: string
          example: "Fred"
        lastName:
          type: string
          example: "Thermometer"
        companyName: 
          type: string
          example: "Acme Co."
    Location:
      type: object
      required:
        - id
        - person
        - coordinate
        - creationTime
      properties:
        id:
          type: integer
          example: 1
        person:
          $ref: '#/components/schemas/Person'
        creationTime:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        latitude:
          type: number
          example: 41.40338
        longitude:
          type: number
          example: 2.17403
    Connection:
      type: object
      required:
        - person
        - location
      properties:
        person:
          $ref: '#/components/schemas/Person'
        location:
          $ref: '#/components/schemas/Location'